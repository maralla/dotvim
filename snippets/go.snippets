global !p
import vim
import os.path
def is_upper(arg):
	return arg and arg[0].isupper()

def add_doc(token):
	snip.rv = ''
	if is_upper(token):
		snip.rv = '// {} TODO add doc.\n'.format(token)

def get_binding_name(token):
	t = token.strip('* ')
	return t[0].lower() if t else ''
endglobal

snippet func "function" b
${1/([A-Z])?\w*/(?1:\/\/ $0 ...)/}func ${1:myFunc}(${2:args}) {
}
endsnippet

snippet type "type" b
`!p add_doc(t[1])
`type ${1:name} ${2:struct} {
	$0
}
endsnippet

snippet meth "bind function to struct" b
`!p add_doc(t[1])
`func (`!p snip.rv=get_binding_name(t[2])` ${2:Type}) ${1:method}(${4:args}) ${5:error} {
	$0
}
endsnippet

snippet pack "package" b
package ${1:`!v expand('%:p:h:t')`}

$0
endsnippet

snippet main "func main()" b
`!p pack = 'package main'
has_package = False
for line in vim.current.buffer:
    if line.startswith('package '):
        has_package = True
        break
if not has_package:
    snip._pack = pack + '\n\n'

snip.rv = getattr(snip, '_pack', '')
`func main() {
	$0
}
endsnippet

snippet go "goroutine" b
go func() {
	$0
}()
endsnippet

snippet co "consts" b
const (
	${1:name} = ${0:value}
)
endsnippet

snippet ctx "context.Context"
context.Context
endsnippet

snippet pln "fmt.Println" b
fmt.Println($0)
endsnippet

snippet jsonun "UnmarshalJSON" b
func (v *$1) UnmarshalJSON(data []byte) error {
	$0
}
endsnippet

snippet sleep "time.Sleep" b
time.Sleep($0)
endsnippet

snippet ctxtm "context.WithTimeout" b
ctx ${1/(^ctx$)?/(?1::\:)/}= context.WithTimeout(${1:context.Background()}, ${2:time.Second})
endsnippet
